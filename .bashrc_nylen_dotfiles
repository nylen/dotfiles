#!/bin/bash

# These aren't always set correctly
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

# Better history control options
# http://unix.stackexchange.com/a/48116/26139
# http://unix.stackexchange.com/a/1292
# http://askubuntu.com/a/115625/99715

# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups
# Append rather than overwrite
shopt -s histappend
# Long history
if [ ! -z "$HISTFILESIZE" ] && [ "$HISTFILESIZE" -lt 999999 ]; then
    echo "WARNING: \$HISTFILESIZE was set to $HISTFILESIZE during shell startup"
    echo "Your history file will be truncated sooner than desired!"
fi
export HISTSIZE=999999
export HISTFILESIZE=999999

export EDITOR=vim

export __ps1_hostname="$(hostname -s)"

__ps1_nonprinting() {
    local _np_start="\["
    local _np_end="\]"

    echo "${_np_start}$1${_np_end}"
}

__terminal_color() {
    echo "\033[$1"
}

# Based on https://superuser.com/a/39995
__prepend_to_path() {
    local DIR="$1"
    if [ -d "$DIR" ]; then
        if [ -z "$PATH" ]; then
            export PATH="$DIR"
        elif [[ ":$PATH:" != *":$DIR:"* ]]; then
            export PATH="$DIR:$PATH"
        fi
    fi
}

__prepend_to_path "$HOME/bin"

__path_alias_dirs=()
__path_alias_aliases=()

__add_path_alias() {
    dir="$1"
    alias="$2"
    # ensure exactly one trailing slash
    dir="${dir%/}/"
    # replace $HOME with ~
    dir="${dir/#$HOME\//~\/}"
    # work around bash version differences (in 4.2 the backslash gets added
    # too, but in 4.4 the substitution doesn't work without the backslash)
    dir="${dir/#~\\/~}"
    # store alias for later use
    __path_alias_dirs+=("$dir")
    __path_alias_aliases+=("$alias")
}

__cd_path_alias() {
    alias="$1"

    if [ -z "$alias" ]; then
        echo 'Registered path aliases:'
        for ((i=0; i<${#__path_alias_dirs[@]}; i++)); do
            alias="${__path_alias_aliases[$i]}"
            dir="${__path_alias_dirs[$i]}"
            echo -e "$alias\t$dir"
        done
        return 0
    fi

    # https://stackoverflow.com/a/1728814/106302
    local _shopt_nocasematch
    _shopt_nocasematch=$(shopt -p nocasematch; true)
    shopt -s nocasematch
    for ((i=0; i<${#__path_alias_dirs[@]}; i++)); do
        if [[ "$alias" = "${__path_alias_aliases[$i]}" ]]; then
            $_shopt_nocasematch # restore setting
            dir="${__path_alias_dirs[$i]}"
            # https://stackoverflow.com/a/30770111/106302
            local _safe_dir
            printf -v _safe_dir '%q' "$dir"
            dir=$(eval echo ${_safe_dir#\\})
            echo "$dir"
            cd "$dir"
            return 0
        fi
    done
    $_shopt_nocasematch # restore setting
    echo "Path alias not recognized: $alias" >&2
    return 1
}

__cleanup_path() {
    local path="$1"
    # ensure a trailing slash
    # XXX this function will not handle multiple trailing slashes
    path="${path%/}/"

    # replace common path components
    path="${path/#$HOME\//~\/}"
    # work around bash version differences
    path="${path/#~\\/~}"

    # replace locally defined paths with shorter aliases
    for ((i=0; i<${#__path_alias_dirs[@]}; i++)); do
        dir="${__path_alias_dirs[$i]}"
        alias="${__path_alias_aliases[$i]}"
        path="${path/#$dir/<$alias>\/}"
        # work around bash version differences
        path="${path/#<$alias>\\/<$alias>}"
    done

    # remove trailing slash
    path="${path%/}"

    echo -n "$path"
}

__bashrc_prompt_command() {
    # This has to come first
    local exit_status=$?

    # Update history file after each command
    history -a # append current session's history to history file
    history -c # clear current session's history
    history -r # read current session's history from file

    local _color_blk=$(__terminal_color '1;30m')
    local _color_red=$(__terminal_color '0;31m')
    local _color_ora=$(__terminal_color '1;31m')
    local _color_grn=$(__terminal_color '0;32m')
    local _color_yel=$(__terminal_color '0;33m')
    local _color_blu=$(__terminal_color '0;34m')
    local _color_mag=$(__terminal_color '0;35m')
    local _color_pur=$(__terminal_color '1;35m')
    local _color_cya=$(__terminal_color '0;36m')
    local _color_wht=$(__terminal_color '1;37m')
    local _color_clr=$(__terminal_color '0m')

    # TODO simplify
    local _pcolor_blk=$(__ps1_nonprinting "$_color_blk")
    local _pcolor_red=$(__ps1_nonprinting "$_color_red")
    local _pcolor_ora=$(__ps1_nonprinting "$_color_ora")
    local _pcolor_grn=$(__ps1_nonprinting "$_color_grn")
    local _pcolor_yel=$(__ps1_nonprinting "$_color_yel")
    local _pcolor_blu=$(__ps1_nonprinting "$_color_blu")
    local _pcolor_mag=$(__ps1_nonprinting "$_color_mag")
    local _pcolor_pur=$(__ps1_nonprinting "$_color_pur")
    local _pcolor_cya=$(__ps1_nonprinting "$_color_cya")
    local _pcolor_wht=$(__ps1_nonprinting "$_color_wht")
    local _pcolor_clr=$(__ps1_nonprinting "$_color_clr")

    local _title_start="\033]0;"
    local _title_end="\007"

    local wd="$(pwd)"
    if [ "$wd" != "$__last_wd" ]; then
        __run_hooks chpwd "$wd" "$__last_wd"
        export __last_wd="$wd"
    fi

    local prompt_wd="$(__cleanup_path "$wd")"

    if [ $exit_status = 0 ]; then
        local indicator="${_pcolor_grn}✓"
    else
        local indicator="${_pcolor_red}✗"
    fi

    if [ $USER = root ]; then
        local username="${_pcolor_red}$USER"
        local prompt_char="#"
    else
        local username="${_pcolor_grn}$USER"
        local prompt_char="$"
    fi

    if [ ! -z "$VIRTUAL_ENV" ]; then
        echo
        echo -e "${_color_blk}Python virtualenv: $(__cleanup_path "$VIRTUAL_ENV")${_color_clr}"
    fi

    if [ $TERM != linux ]; then
        # system consoles don't support xterm title escape
        echo -ne "${_title_start}$prompt_wd on $__ps1_hostname${_title_end}"
    fi

    PS1="$indicator"
    PS1="$PS1 $username${_pcolor_wht}@${_pcolor_cya}$__ps1_hostname"
    PS1="$PS1 ${_pcolor_blu}$prompt_wd"
    PS1="$PS1 ${_pcolor_wht}$prompt_char${_pcolor_clr} "
    export PS1
}

PROMPT_COMMAND=__bashrc_prompt_command

# User-defined hooks, inspired by zsh
# TODO - rewrite to use arrays
# (not associative arrays though, because some servers are still on bash 3.x!)

__add_hook() {
    hook_name="$1"
    fn="$2"
    # Dynamic variable names: http://stackoverflow.com/a/16553351
    hook_functions="__hook_functions_$hook_name"
    if [ -z "${!hook_functions}" ]; then
        # Add $fn as first hook for $hook_name
        export $hook_functions=":$fn:"
    elif [[ "${!hook_functions}" != *":$fn:"* ]]; then
        # There is already at least one hook for $hook_name, and this hook is
        # not already set, so add it
        export $hook_functions="${!hook_functions}$fn:"
    fi
}

__run_hooks() {
    hook_name="$1"
    shift
    hook_functions="__hook_functions_$hook_name"
    local IFS=':'
    for fn in ${!hook_functions}; do
        if [ ! -z "$fn" ]; then
            "$fn" "$@"
        fi
    done
}

# Set up state for chpwd hook
export __last_wd="$(pwd)"

__hook_chpwd_check_nvmrc() {
    wd="$1"
    last="$2"
    if [ -f "$wd/.nvmrc" ]; then
        if type -P node > /dev/null; then
            node_version="$(node --version)"
            read nvm_version < "$wd/.nvmrc"
            if [ "$node_version" = "$nvm_version" ]; then
                echo "node $node_version already loaded"
                return
            fi
        fi
        if type -t nvm > /dev/null; then
            nvm use || echo "Try running nvm install"
        else
            echo "Warning: found .nvmrc in $wd but nvm not installed"
        fi
    fi
}
__add_hook chpwd __hook_chpwd_check_nvmrc

# Load nvm if present
export NVM_DIR="$HOME/.nvm"
if [ -s "$NVM_DIR/nvm.sh" ]; then
    # Load nvm but don't use it yet: we need to do some other hacks first.
    # See https://github.com/creationix/nvm/issues/1261#issuecomment-366879288
    . "$NVM_DIR/nvm.sh" --no-use
    # I don't need this check, and it's slow (loads npm).
    # Do not use the npm `prefix` config; do not report related bugs to nvm ;)
    nvm_die_on_prefix() {
        return 0
    }
    # This also loads npm; let's just skip it.
    nvm_print_npm_version() {
        return 0
    }
    # nvm_resolve_local_alias can also be slow; cache it.
    if [ -f "$NVM_DIR/_default_version" ]; then
        NVM_AUTO_LOAD_VERSION=$(cat "$NVM_DIR/_default_version")
    fi
    if [ -z "$NVM_AUTO_LOAD_VERSION" ]; then
        NVM_AUTO_LOAD_VERSION=$(nvm_resolve_local_alias default)
    fi
    if [ -n "$NVM_AUTO_LOAD_VERSION" ]; then
        echo "$NVM_AUTO_LOAD_VERSION" > "$NVM_DIR/_default_version"
        nvm use --silent "$NVM_AUTO_LOAD_VERSION"
    fi
fi

# Load phpbrew if present
if [ -s "$HOME/.phpbrew/bashrc" ]; then
    . "$HOME/.phpbrew/bashrc"
fi

# Other miscellaneous functions
mkdir-cd() {
    dir="$1"
    mkdir -p "$dir"
    cd "$dir"
}
